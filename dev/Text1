Lo que he hecho:

1.- Mover los archivos comprimidos con las pantallas fijas a /bin. En esta carpeta es donde se preparan los binarios que luego se ponen en las páginas de RAM extra de los modelos de 128K

ending.bin
loading.bin

2.- Es necesario que, aunque no lo usemos, haya un marco.bin, así que lo creo en /bin como un archivo vacío.

(Por ejemplo, en Windows, botón derecho->nuevo archivo de texto, y luego le ponemos de nombre marco.bin).

3.- Edito /bin/list.txt y compruebo que aparecen, en este orden, los tres archivos binarios de nuestro almacén de cosas:

title.bin
marco.bin
ending.bin

4.- Nuestro juego ahora tendrá dos bloques más de datos: uno que irá en RAM1 y que tendrá el player y la música, y otro que irá en RAM3 con los archivos comprimidos. Además, habrá que incluir en el cargador el código que carga los nuevos bloques y los mueve a sus ubicaciones definitivas en la RAM extendida. Por tanto, tengo que modificar loader.bas y make.bat. En la carpeta /spare de la Churrera 3.99.3 están los que usé en Goku Mal, y me he basado en ellos. Lo primero que hace loader.bas después de cargar la pantalla es cargar un bloque "reubica" que es el que moverá los datos extra a la RAM extra y que habrá que generar a partir de reubica.asm en nuestro make.bat

loader.bas ------------------------------------------------------------
10 BORDER NOT PI:PAPER NOT PI:INK NOT PI:CLEAR VAL"24199":LET a=VAL"25000":LET b=a+VAL"2":LOAD""SCREEN$:POKE VAL"23739",CODE"o":LOAD""CODE:LOAD""CODE:POKE a,VAL"1":RANDOMIZE USR b:LOAD""CODE:POKE a,VAL"3":RANDOMIZE USR b:LOAD""CODE:RANDOMIZE USR VAL"24200"

-----------------------------------------------------------------------

make.bat --------------------------------------------------------------
@echo off
echo ### COMPILANDO SCRIPT ###
cd ..\script
msc dogmole.spt msc.h 24
copy *.h ..\dev
cd ..\dev
echo -------------------------------------------------------------------------------
echo ### GENERANDO BINARIOS ###
echo * Building reubica
..\utils\pasmo reubica.asm reubica.bin
echo * Building RAM3 AND RAM4 AND RAM6
cd ..\bin
librarian.exe
copy RAM3.bin ..\dev\ram3.bin
copy librarian.h ..\dev
echo -------------------------------------------------------------------------------
echo ### COMPILANDO WYZ PLAYER ###
cd ..\mus
..\utils\pasmo WYZproPlay47aZX.ASM ram1.bin
copy ram1.bin ..\dev
cd ..\dev
echo -------------------------------------------------------------------------------
echo ### COMPILANDO GUEGO ###
zcc +zx -vn dogmole.c -o dogmole.bin -lsplib2 -zorg=24200
echo -------------------------------------------------------------------------------
echo ### CONSTRUYENDO CINTA ###
..\utils\bas2tap -a10 -sLOADER loader.bas loader.tap
..\utils\bin2tap -o reubica.tap -a 25000 reubica.bin
..\utils\bin2tap -o ram1.tap -a 32768 ram1.bin
..\utils\bin2tap -o ram3.tap -a 32768 ram3.bin
..\utils\bin2tap -o screen.tap -a 16384 loading.bin
..\utils\bin2tap -o main.tap -a 24200 dogmole.bin
copy /b loader.tap + screen.tap + reubica.tap + ram1.tap + ram3.tap + main.tap dogmole.tap
echo -------------------------------------------------------------------------------
echo ### LIMPIANDO ###
del loader.tap
del screen.tap
del main.tap
del reubica.tap
del ram1.bin
del ram3.bin
del ram1.tap
del ram3.tap
del dogmole.bin
del zcc_opt.def
echo -------------------------------------------------------------------------------
echo ### DONE ###
-----------------------------------------------------------------------

Esto es lo que hace nuestro make.bat

1.- Compila el script y copia sus archivos en /dev
2.- Ensambla reubica.asm en reubica.bin
3.- Ejecuta "librarian" en /bin, que leerá list.txt y creará nuestro binario para poner en RAM3, además de un librarian.h con la lista de recursos. Luego se copia librarian.h y ram3.bin en /dev
4.- Ensambla el player de WYZ con las canciones y genera ram1.bin. Luego copia ram1.bin en /dev
5.- Compila el güego.
6.- Crea una cinta con el cargador, la pantalla, reubica.bin, ram1 y ram3, y el juego.
7.- Hace limpieza de cacafuti.

5.- Preparo el player con las músicas. Así, para probar, he cogido tres canciones del Maritrini 1 y sus instrumentos y los he puesto en /mus:

instrumentos.asm
menu.mus
level1.mus
gameending.mus

	Edito WYZproPlay47aZX.ASM y me voy al final, para activarle tres canciones e incluir mis archivos. El final del archivo queda así:
	
-----------------------------------------------------------------------
;; INCLUIR LOS DATOS DE LA MUSICA (PATTERNS/EFFECTS)

                INCLUDE "instrumentos.asm"

SONG_0:			INCBIN "menu.mus"
SONG_1:			INCBIN "level1.mus"
SONG_2:			INCBIN "gameending.mus"


;; INCLUIR LOS EFECTOS DE SONIDO:

				INCLUDE "efectos.asm"
				
TABLA_SONG:     DW      SONG_0, SONG_1, SONG_2
TABLA_EFECTOS:  DW  	EFECTO0, EFECTO1, EFECTO2, EFECTO3, EFECTO4, EFECTO5, EFECTO6, EFECTO7, EFECTO8

;; NADA A PARTIR DE AQUI!!!
BUFFERS_CANALES:
               	DB		0

-----------------------------------------------------------------------
	
/// Cambios en el motor
a) Reorganizo #includes en dogmole.c y cambio dónde se pone la pila:
#pragma output STACKPTR=24099

b) Fixes en mainloop.h
	linea 163: wyz_play_music (0); música de título
	linea 272 y 696: wyz_play_music (1); que es nuestra canción.
	linea 854: wyz_play_music (2); canción del final.
c) En extern.h, cambiamos peta_el_beper por wyz_play_sound ;
d) En config.h, activo MODE_128K