// msc.h
// Generado por Mojon Script Compiler de la Churrera
// Copyleft 2011 The Mojon Twins
 
// Script data & pointers
extern unsigned char mscce_0 [];
extern unsigned char mscce_1 [];
extern unsigned char mscce_2 [];
extern unsigned char mscce_3 [];
extern unsigned char mscce_4 [];
extern unsigned char mscce_5 [];
extern unsigned char mscce_6 [];
extern unsigned char mscce_7 [];
extern unsigned char mscce_8 [];
extern unsigned char mscce_9 [];
extern unsigned char mscce_10 [];
extern unsigned char mscce_11 [];
extern unsigned char mscce_12 [];
extern unsigned char msccf_0 [];
extern unsigned char msccf_1 [];
extern unsigned char msccf_2 [];
extern unsigned char msccf_3 [];
extern unsigned char msccf_4 [];
extern unsigned char msccf_5 [];
extern unsigned char msccf_6 [];
extern unsigned char msccf_7 [];
extern unsigned char msccf_8 [];
 
unsigned char *e_scripts [] = {
    mscce_0, 0, 0, 0, 0, mscce_2, 0, 0, 0, mscce_3, 0, 0, mscce_4, 0, mscce_6, mscce_5, 0, 0, mscce_11, mscce_12, mscce_8, mscce_7, mscce_9, mscce_10, mscce_0, mscce_1
};
 
unsigned char *f_scripts [] = {
    msccf_0, 0, 0, 0, 0, msccf_0, 0, 0, 0, 0, 0, 0, 0, 0, msccf_2, msccf_1, 0, 0, msccf_7, msccf_8, msccf_4, msccf_3, msccf_5, msccf_6, 0
};
 
#asm
._mscce_0
    defb 0x06, 0xF0, 0xFF, 0x01, 0x03, 0x01, 0xFF, 0xFF
._mscce_1
    defb 0x05, 0x10, 0x02, 0x04, 0xFF, 0xFF, 0xFF
._mscce_2
    defb 0x16, 0xF0, 0xFF, 0x20, 0x0C, 0x07, 0x17, 0x20, 0x0D, 0x06, 0x18, 0x01, 0x06, 0x00, 0x01, 0x07, 0x00, 0x51, 0xB4, 0x54, 0xDF, 0x7F, 0xFF, 0xFF
._mscce_3
    defb 0x2B, 0xF0, 0xFF, 0x20, 0x07, 0x02, 0x19, 0x20, 0x07, 0x03, 0x1A, 0xE3, 0x00, 0x00, 0x35, 0x2E, 0x21, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x24, 0x21, 0x00, 0x21, 0x2C, 0x00, 0x33, 0x35, 0x22, 0x34, 0x25, 0x32, 0x32, 0x21, 0x2E, 0x25, 0x2F, 0x00, 0x00, 0xEE, 0xFF, 0xFF
._mscce_4
    defb 0x33, 0xF0, 0xFF, 0x20, 0x04, 0x06, 0x1B, 0x20, 0x04, 0x07, 0x1C, 0x20, 0x07, 0x06, 0x19, 0x20, 0x07, 0x07, 0x1A, 0xE3, 0x00, 0x00, 0x35, 0x2E, 0x21, 0x00, 0x25, 0x2E, 0x34, 0x32, 0x21, 0x24, 0x21, 0x00, 0x21, 0x2C, 0x00, 0x33, 0x35, 0x22, 0x34, 0x25, 0x32, 0x32, 0x21, 0x2E, 0x25, 0x2F, 0x00, 0x00, 0xEE, 0xFF, 0xFF
._mscce_5
    defb 0x33, 0xF0, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x2D, 0x21, 0x23, 0x21, 0x32, 0x29, 0x21, 0x00, 0x2C, 0x21, 0x00, 0x25, 0x33, 0x34, 0x32, 0x21, 0x26, 0x21, 0x2C, 0x21, 0x32, 0x29, 0x21, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x20, 0x02, 0x07, 0x15, 0x20, 0x03, 0x07, 0x1D, 0x51, 0x18, 0x64, 0x4C, 0x7F, 0x01, 0x06, 0x00, 0xFF, 0x09, 0x10, 0x08, 0x00, 0xFF, 0x20, 0x00, 0x03, 0x1F, 0xFF, 0x09, 0x10, 0x08, 0x01, 0xFF, 0x20, 0x03, 0x07, 0x1E, 0xFF, 0xFF
._mscce_6
    defb 0x2A, 0x10, 0x09, 0x00, 0xFF, 0x01, 0x06, 0x00, 0x20, 0x02, 0x02, 0x12, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x2E, 0x21, 0x00, 0x33, 0x25, 0x34, 0x21, 0x00, 0x23, 0x2F, 0x2E, 0x00, 0x34, 0x25, 0x34, 0x21, 0x33, 0xEE, 0x51, 0x20, 0x20, 0x2F, 0x2F, 0xFF, 0xFF
._mscce_7
    defb 0x33, 0xF0, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x2C, 0x22, 0x25, 0x32, 0x34, 0x2F, 0x00, 0x25, 0x2C, 0x00, 0x34, 0x35, 0x25, 0x32, 0x34, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x20, 0x03, 0x02, 0x13, 0x20, 0x04, 0x02, 0x1D, 0x51, 0x30, 0x10, 0x59, 0x2F, 0x01, 0x06, 0x00, 0xFF, 0x09, 0x10, 0x0A, 0x00, 0xFF, 0x20, 0x00, 0x07, 0x1F, 0xFF, 0x09, 0x10, 0x0A, 0x01, 0xFF, 0x20, 0x04, 0x02, 0x1E, 0xFF, 0xFF
._mscce_8
    defb 0x2A, 0x10, 0x0B, 0x00, 0xFF, 0x01, 0x06, 0x00, 0x20, 0x06, 0x04, 0x12, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x2E, 0x21, 0x00, 0x33, 0x25, 0x34, 0x21, 0x00, 0x23, 0x2F, 0x2E, 0x00, 0x34, 0x25, 0x34, 0x21, 0x33, 0xEE, 0x51, 0x60, 0x40, 0x6F, 0x4F, 0xFF, 0xFF
._mscce_9
    defb 0x33, 0xF0, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x2F, 0x2E, 0x2F, 0x33, 0x2F, 0x00, 0x25, 0x2C, 0x00, 0x33, 0x25, 0x22, 0x2F, 0x33, 0x2F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x20, 0x0C, 0x02, 0x1D, 0x20, 0x0D, 0x02, 0x14, 0x51, 0xB6, 0x10, 0xDF, 0x2F, 0x01, 0x06, 0x00, 0xFF, 0x09, 0x10, 0x0C, 0x00, 0xFF, 0x20, 0x0E, 0x07, 0x1F, 0xFF, 0x09, 0x10, 0x0C, 0x01, 0xFF, 0x20, 0x0C, 0x02, 0x1E, 0xFF, 0xFF
._mscce_10
    defb 0x2A, 0x10, 0x0D, 0x00, 0xFF, 0x01, 0x06, 0x00, 0x20, 0x0D, 0x08, 0x12, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x2E, 0x21, 0x00, 0x33, 0x25, 0x34, 0x21, 0x00, 0x23, 0x2F, 0x2E, 0x00, 0x34, 0x25, 0x34, 0x21, 0x33, 0xEE, 0x51, 0xD0, 0x80, 0xDF, 0x8F, 0xFF, 0xFF
._mscce_11
    defb 0x33, 0xF0, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x29, 0x34, 0x2F, 0x32, 0x00, 0x25, 0x2C, 0x00, 0x2C, 0x25, 0x2E, 0x21, 0x24, 0x2F, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0x20, 0x0C, 0x08, 0x1D, 0x20, 0x0D, 0x08, 0x16, 0x51, 0xB6, 0x80, 0xDF, 0x8F, 0x01, 0x06, 0x00, 0xFF, 0x09, 0x10, 0x0E, 0x00, 0xFF, 0x20, 0x0E, 0x03, 0x1F, 0xFF, 0x09, 0x10, 0x0E, 0x01, 0xFF, 0x20, 0x0C, 0x08, 0x1E, 0xFF, 0xFF
._mscce_12
    defb 0x2A, 0x10, 0x0F, 0x00, 0xFF, 0x01, 0x06, 0x00, 0x20, 0x0D, 0x08, 0x12, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x2E, 0x21, 0x00, 0x33, 0x25, 0x34, 0x21, 0x00, 0x23, 0x2F, 0x2E, 0x00, 0x34, 0x25, 0x34, 0x21, 0x33, 0xEE, 0x51, 0xD0, 0x80, 0xDF, 0x8F, 0xFF, 0xFF
._msccf_0
    defb 0x09, 0x21, 0xC0, 0xDF, 0x22, 0x60, 0x7F, 0xFF, 0xF1, 0xFF, 0x17, 0x20, 0x0C, 0x07, 0x10, 0x06, 0x00, 0xFF, 0xE3, 0x00, 0x00, 0x33, 0x25, 0x34, 0x21, 0x33, 0xEE, 0xE1, 0xE0, 0x07, 0x01, 0x06, 0x01, 0xFF, 0x23, 0x20, 0x0D, 0x06, 0x10, 0x07, 0x00, 0xFF, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x2F, 0x2C, 0x21, 0x00, 0x30, 0x29, 0x32, 0x21, 0x34, 0x21, 0xEE, 0xE1, 0xE0, 0x0B, 0x01, 0x07, 0x01, 0xFF, 0xFF
._msccf_1
    defb 0x35, 0x20, 0x03, 0x07, 0x10, 0x08, 0x00, 0xFF, 0x01, 0x08, 0x01, 0x20, 0x03, 0x07, 0x1E, 0x20, 0x00, 0x03, 0x00, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x32, 0x29, 0x30, 0x34, 0x21, 0x00, 0x21, 0x22, 0x29, 0x25, 0x32, 0x34, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xE0, 0x08, 0xFF, 0x22, 0x20, 0x02, 0x07, 0x10, 0x06, 0x00, 0xFF, 0x01, 0x06, 0x01, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x21, 0x2C, 0x25, 0x00, 0x26, 0x32, 0x21, 0x2E, 0xEE, 0xE1, 0xE0, 0x0B, 0xFF, 0xFF
._msccf_2
    defb 0x34, 0x10, 0x09, 0x00, 0x10, 0x06, 0x00, 0x20, 0x02, 0x02, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x06, 0x01, 0x01, 0x09, 0x01, 0x10, 0x02, 0x01, 0x40, 0x01, 0x20, 0x0E, 0x03, 0x10, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x34, 0x32, 0x21, 0x30, 0x21, 0x24, 0x2F, 0xEE, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
._msccf_3
    defb 0x35, 0x20, 0x04, 0x02, 0x10, 0x0A, 0x00, 0xFF, 0x01, 0x0A, 0x01, 0x20, 0x04, 0x02, 0x1E, 0x20, 0x00, 0x07, 0x00, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x32, 0x29, 0x30, 0x34, 0x21, 0x00, 0x21, 0x22, 0x29, 0x25, 0x32, 0x34, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xE0, 0x08, 0xFF, 0x2C, 0x20, 0x03, 0x02, 0x10, 0x06, 0x00, 0xFF, 0x01, 0x06, 0x01, 0xE3, 0x25, 0x33, 0x34, 0x21, 0x33, 0x00, 0x2C, 0x25, 0x2A, 0x2F, 0x33, 0x00, 0x2F, 0x00, 0x25, 0x32, 0x25, 0x33, 0x00, 0x2D, 0x35, 0x39, 0x00, 0x23, 0x28, 0x29, 0x23, 0x2F, 0xEE, 0xE1, 0xE0, 0x07, 0xFF, 0xFF
._msccf_4
    defb 0x34, 0x10, 0x0B, 0x00, 0x10, 0x06, 0x00, 0x20, 0x06, 0x04, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x06, 0x01, 0x01, 0x0B, 0x01, 0x10, 0x02, 0x01, 0x40, 0x01, 0x20, 0x0E, 0x07, 0x10, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x34, 0x32, 0x21, 0x30, 0x21, 0x24, 0x2F, 0xEE, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
._msccf_5
    defb 0x35, 0x20, 0x0C, 0x02, 0x10, 0x0C, 0x00, 0xFF, 0x01, 0x0C, 0x01, 0x20, 0x0C, 0x02, 0x1E, 0x20, 0x0E, 0x07, 0x00, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x32, 0x29, 0x30, 0x34, 0x21, 0x00, 0x21, 0x22, 0x29, 0x25, 0x32, 0x34, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xE0, 0x08, 0xFF, 0x2E, 0x20, 0x0D, 0x02, 0x10, 0x06, 0x00, 0xFF, 0x01, 0x06, 0x01, 0xE3, 0x2D, 0x25, 0x00, 0x23, 0x2F, 0x2D, 0x25, 0x32, 0x29, 0x21, 0x00, 0x35, 0x2E, 0x00, 0x28, 0x25, 0x2C, 0x21, 0x2F, 0x00, 0x25, 0x2E, 0x00, 0x2D, 0x21, 0x2E, 0x34, 0x25, 0x23, 0x21, 0xEE, 0xE1, 0xE0, 0x07, 0xFF, 0xFF
._msccf_6
    defb 0x34, 0x10, 0x0D, 0x00, 0x10, 0x06, 0x00, 0x20, 0x0D, 0x08, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x06, 0x01, 0x01, 0x0D, 0x01, 0x10, 0x02, 0x01, 0x40, 0x01, 0x20, 0x00, 0x07, 0x10, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x34, 0x32, 0x21, 0x30, 0x21, 0x24, 0x2F, 0xEE, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
._msccf_7
    defb 0x35, 0x20, 0x0C, 0x08, 0x10, 0x0E, 0x00, 0xFF, 0x01, 0x0E, 0x01, 0x20, 0x0C, 0x08, 0x1E, 0x20, 0x0E, 0x03, 0x00, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x32, 0x29, 0x30, 0x34, 0x21, 0x00, 0x21, 0x22, 0x29, 0x25, 0x32, 0x34, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEE, 0xE0, 0x08, 0xFF, 0x2E, 0x20, 0x0D, 0x08, 0x10, 0x06, 0x00, 0xFF, 0x01, 0x06, 0x01, 0xE3, 0x00, 0x36, 0x2F, 0x39, 0x00, 0x24, 0x25, 0x00, 0x23, 0x2F, 0x2D, 0x30, 0x32, 0x21, 0x33, 0x00, 0x2C, 0x2F, 0x33, 0x00, 0x2D, 0x29, 0x25, 0x32, 0x23, 0x2F, 0x2C, 0x25, 0x33, 0x00, 0xEE, 0xE1, 0xE0, 0x07, 0xFF, 0xFF
._msccf_8
    defb 0x34, 0x10, 0x0F, 0x00, 0x10, 0x06, 0x00, 0x20, 0x0D, 0x08, 0xFF, 0x01, 0x01, 0x00, 0x01, 0x06, 0x01, 0x01, 0x0F, 0x01, 0x10, 0x02, 0x01, 0x40, 0x01, 0x20, 0x00, 0x03, 0x10, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x34, 0x32, 0x21, 0x30, 0x21, 0x24, 0x2F, 0xEE, 0xE1, 0xE0, 0x06, 0xFF, 0xFF
#endasm
 
unsigned char *script;
unsigned char *next_script;
unsigned char sc_i, sc_x, sc_y, sc_c, sc_n, sc_m, sc_terminado, sc_continuar, sc_res;
 
void msc_init_all () {
    for (sc_i = 0; sc_i < MAX_FLAGS; sc_i ++)
        flags [sc_i] = 0;
}
 
unsigned char read_byte () {
    sc_c = script [0];
    script ++;
    return sc_c;
}
 
unsigned char read_vbyte () {
    sc_c = read_byte ();
    if (sc_c & 128) return flags [sc_c & 127];
    return sc_c;
}
 
// Ejecutamos el script apuntado por *script:
unsigned char run_script () {
    sc_res = 0;
    sc_terminado = 0;
    sc_continuar = 0;
 
    if (script == 0)
        return; 
 
    script_something_done = 0;
 
    while (1) {
        sc_c = read_byte ();
        if (sc_c == 0xFF) break;
        next_script = script + sc_c;
        sc_terminado = sc_continuar = 0;
        while (!sc_terminado) {
            sc_c = read_byte ();
            switch (sc_c) {
                case 0x10:
                    // IF FLAG x = n
                    // Opcode: 10 x n
                    sc_x = read_vbyte ();
                    sc_n = read_vbyte ();
                    if (flags [sc_x] != sc_n)
                        sc_terminado = 1;
                    break;
                case 0x20:
                    // IF PLAYER_TOUCHES x, y
                    // Opcode: 20 x y
                    sc_x = read_vbyte ();
                    sc_y = read_vbyte ();
                    if (!((player.x >> 6) >= (sc_x << 4) - 15 && (player.x >> 6) <= (sc_x << 4) + 15 && (player.y >> 6) >= (sc_y << 4) - 15 && (player.y >> 6) <= (sc_y << 4) + 15))
                        sc_terminado = 1;
                    break;
                case 0x21:
                    // IF PLAYER_IN_X x1, x2
                    // Opcode: 21 x1 x2
                    sc_x = read_byte ();
                    sc_y = read_byte ();
                    if (!((player.x >> 6) >= sc_x && (player.x >> 6) <= sc_y))
                        sc_terminado = 1;
                    break;
                case 0x22:
                    // IF PLAYER_IN_Y y1, y2
                    // Opcode: 22 y1 y2
                    sc_x = read_byte ();
                    sc_y = read_byte ();
                    if (!((player.y >> 6) >= sc_x && (player.y >> 6) <= sc_y))
                        sc_terminado = 1;
                    break;
                case 0xF0:
                     // IF TRUE
                     // Opcode: F0
                     break;
                case 0xFF:
                    // THEN
                    // Opcode: FF
                    sc_terminado = 1;
                    sc_continuar = 1;
                    script_something_done = 1;
                    break;
            }
        }
        if (sc_continuar) {
            sc_terminado = 0;
            while (!sc_terminado) {
                sc_c = read_byte ();
                switch (sc_c) {
                    case 0x01:
                        // SET FLAG x = n
                        // Opcode: 01 x n
                        sc_x = read_vbyte ();
                        sc_n = read_vbyte ();
                        flags [sc_x] = sc_n;
                        break;
                    case 0x10:
                        // INC FLAG x, n
                        // Opcode: 10 x n
                        sc_x = read_vbyte ();
                        sc_n = read_vbyte ();
                        flags [sc_x] += sc_n;
                        break;
                    case 0x20:
                        // SET TILE (x, y) = n
                        // Opcode: 20 x y n
                        sc_x = read_vbyte ();
                        sc_y = read_vbyte ();
                        sc_n = read_vbyte ();
                        map_buff [sc_x + (sc_y << 4) - sc_y] = sc_n;
                        map_attr [sc_x + (sc_y << 4) - sc_y] = comportamiento_tiles [sc_n];
                        draw_coloured_tile (VIEWPORT_X + sc_x + sc_x, VIEWPORT_Y + sc_y + sc_y, sc_n);
                        break;
                    case 0x40:
                        // INC OBJECTS n
                        // Opcode: 40 n
                        sc_n = read_vbyte ();
                        player.objs += sc_n;
                        break;
                    case 0x51:
                        // SET_FIRE_ZONE x1, y1, x2, y2
                        // Opcode: 51 x1 y1 x2 y2
                        fzx1 = read_byte ();
                        fzy1 = read_byte ();
                        fzx2 = read_byte ();
                        fzy2 = read_byte ();
                        f_zone_ac = 1;
                        break;
                    case 0xE0:
                        // SOUND n
                        // Opcode: E0 n
                        sc_n = read_vbyte ();
                        peta_el_beeper (sc_n);
                        break;
                    case 0xE1:
                        // SHOW
                        // Opcode: E1
                        sp_UpdateNow ();
                        break;
                    case 0xE3:
                        sc_x = 0;
                        while (1) {
                           sc_n = read_byte ();
                           if (sc_n == 0xEE) break;
                           sp_PrintAtInv (LINE_OF_TEXT, LINE_OF_TEXT_X + sc_x, 71, sc_n);
                           sc_x ++;
                        }
                        break;
                    case 0xF1:
                        script_result = 1;
                        sc_terminado = 1;
                        break;
                    case 0xFF:
                        sc_terminado = 1;
                        break;
                }
            }
        }
        script = next_script;
    }
 
    return sc_res;
}
