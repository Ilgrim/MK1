// msc.h
// Generado por Mojon Script Compiler de la Churrera
// Copyleft 2011 The Mojon Twins
 
// Script data & pointers
extern unsigned char mscce_0 [];
extern unsigned char mscce_1 [];
extern unsigned char mscce_2 [];
extern unsigned char mscce_3 [];
extern unsigned char mscce_4 [];
extern unsigned char mscce_5 [];
extern unsigned char mscce_6 [];
extern unsigned char mscce_7 [];
extern unsigned char mscce_8 [];
extern unsigned char mscce_9 [];
extern unsigned char mscce_10 [];
extern unsigned char msccf_0 [];
 
unsigned char *e_scripts [] = {
    mscce_3, mscce_4, mscce_5, mscce_6, mscce_7, 0, 0, mscce_10, mscce_9, mscce_8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, mscce_0, mscce_2, mscce_1
};
 
unsigned char *f_scripts [] = {
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, msccf_0, 0, 0
};
 
#asm
._mscce_0

    defb 0x09, 0xF0, 0xFF, 0x01, 0x08, 0x05, 0x70, 0x3C, 0x20, 0xFF, 0xFF

._mscce_1

    defb 0x17, 0xF0, 0xFF, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x70, 0x3C, 0x28, 0x31, 0x01
    defb 0x01, 0x08, 0x8C, 0x6D, 0x8C, 0x8D, 0x8E, 0xFF, 0xFF

._mscce_2

    defb 0x09, 0xF0, 0xFF, 0x01, 0x0A, 0x00, 0x01, 0x0B, 0x00, 0xFF, 0xFF

._mscce_3

    defb 0x44, 0x10, 0x08, 0x00, 0xFF, 0xE3, 0x30, 0x2F, 0x2E, 0x00, 0x2C, 0x21, 0x00, 0x25, 0x33, 0x34
    defb 0x21, 0x34, 0x35, 0x21, 0x00, 0x25, 0x2E, 0x00, 0x33, 0x35, 0x00, 0x30, 0x25, 0x24, 0x25, 0x33
    defb 0x34, 0x21, 0x2C, 0xEE, 0x20, 0x01, 0x05, 0x19, 0x01, 0x04, 0x01, 0x01, 0x05, 0x05, 0x20, 0x0E
    defb 0x08, 0x0F, 0x01, 0x06, 0x0E, 0x01, 0x07, 0x08, 0x01, 0x09, 0x01, 0x01, 0x0C, 0x00, 0x01, 0x0D
    defb 0x02, 0x01, 0x0E, 0x02, 0xFF, 0xFF

._mscce_4

    defb 0x37, 0x10, 0x08, 0x01, 0xFF, 0xE3, 0x21, 0x28, 0x2F, 0x32, 0x21, 0x00, 0x28, 0x21, 0x39, 0x00
    defb 0x24, 0x2F, 0x33, 0x00, 0x25, 0x33, 0x34, 0x21, 0x34, 0x35, 0x21, 0x33, 0x0E, 0x0E, 0x0E, 0xEE
    defb 0x20, 0x0D, 0x08, 0x19, 0x01, 0x04, 0x0D, 0x01, 0x05, 0x08, 0x20, 0x0E, 0x02, 0x0F, 0x01, 0x06
    defb 0x0E, 0x01, 0x07, 0x02, 0x01, 0x09, 0x02, 0xFF, 0xFF

._mscce_5

    defb 0x37, 0x10, 0x08, 0x02, 0xFF, 0xE3, 0x36, 0x21, 0x39, 0x21, 0x0E, 0x0E, 0x0E, 0x00, 0x30, 0x29
    defb 0x25, 0x2E, 0x33, 0x21, 0x00, 0x35, 0x2E, 0x00, 0x30, 0x2F, 0x23, 0x2F, 0x0E, 0x0E, 0x0E, 0xEE
    defb 0x20, 0x01, 0x01, 0x19, 0x01, 0x04, 0x01, 0x01, 0x05, 0x01, 0x20, 0x0E, 0x07, 0x0F, 0x01, 0x06
    defb 0x0E, 0x01, 0x07, 0x07, 0x01, 0x09, 0x03, 0xFF, 0xFF

._mscce_6

    defb 0x2F, 0x10, 0x08, 0x03, 0xFF, 0xE3, 0x24, 0x21, 0x34, 0x25, 0x00, 0x2D, 0x35, 0x23, 0x28, 0x21
    defb 0x00, 0x30, 0x29, 0x33, 0x21, 0x01, 0x01, 0xEE, 0x20, 0x07, 0x08, 0x19, 0x01, 0x04, 0x07, 0x01
    defb 0x05, 0x08, 0x20, 0x0E, 0x01, 0x0F, 0x01, 0x06, 0x0E, 0x01, 0x07, 0x01, 0x01, 0x09, 0x02, 0xFF
    defb 0xFF

._mscce_7

    defb 0x35, 0x10, 0x08, 0x04, 0xFF, 0xE3, 0x23, 0x21, 0x33, 0x29, 0x00, 0x21, 0x23, 0x21, 0x22, 0x21
    defb 0x2D, 0x2F, 0x33, 0x00, 0x25, 0x33, 0x34, 0x25, 0x00, 0x30, 0x29, 0x33, 0x2F, 0xEE, 0x20, 0x01
    defb 0x08, 0x19, 0x01, 0x04, 0x01, 0x01, 0x05, 0x08, 0x20, 0x0D, 0x09, 0x0F, 0x01, 0x06, 0x0D, 0x01
    defb 0x07, 0x09, 0x01, 0x09, 0x01, 0xFF, 0xFF

._mscce_8

    defb 0x25, 0x10, 0x08, 0x05, 0xFF, 0x20, 0x01, 0x01, 0x19, 0x01, 0x04, 0x01, 0x01, 0x05, 0x01, 0x20
    defb 0x00, 0x04, 0x0F, 0x01, 0x06, 0x00, 0x01, 0x07, 0x04, 0x01, 0x09, 0x02, 0x01, 0x0C, 0x09, 0x01
    defb 0x0D, 0x0D, 0x01, 0x0E, 0x01, 0xFF, 0x0B, 0x10, 0x0F, 0x00, 0xFF, 0x70, 0x3C, 0x28, 0x01, 0x0F
    defb 0x01, 0xFF, 0xFF

._mscce_9

    defb 0x1C, 0x10, 0x08, 0x06, 0xFF, 0x20, 0x09, 0x01, 0x19, 0x01, 0x04, 0x09, 0x01, 0x05, 0x01, 0x20
    defb 0x00, 0x05, 0x0F, 0x01, 0x06, 0x00, 0x01, 0x07, 0x05, 0x01, 0x09, 0x03, 0xFF, 0xFF

._mscce_10

    defb 0x1C, 0x10, 0x08, 0x07, 0xFF, 0x20, 0x0D, 0x08, 0x19, 0x01, 0x04, 0x0D, 0x01, 0x05, 0x08, 0x20
    defb 0x00, 0x07, 0x0F, 0x01, 0x06, 0x00, 0x01, 0x07, 0x07, 0x01, 0x09, 0x03, 0xFF, 0xFF

._msccf_0

    defb 0x0C, 0x20, 0x84, 0x85, 0xFF, 0xE0, 0x02, 0xE0, 0x02, 0xE0, 0x03, 0x6F, 0xFF, 0x12, 0x60, 0x10
    defb 0x01, 0x0D, 0xFF, 0x10, 0x0A, 0x01, 0xE0, 0x00, 0x20, 0x82, 0x83, 0x16, 0xE1, 0xE0, 0x00, 0xFF
    defb 0x1A, 0x10, 0x09, 0x8A, 0x10, 0x0B, 0x00, 0xFF, 0x01, 0x0B, 0x01, 0x20, 0x86, 0x87, 0x00, 0xE1
    defb 0xE0, 0x00, 0xE0, 0x07, 0x10, 0x08, 0x01, 0x01, 0x05, 0x0A, 0xFF, 0xFF

#endasm
 
unsigned char *script;
 
void msc_init_all (void) {
    unsigned char i;
    for (i = 0; i < MAX_FLAGS; i ++)
        flags [i] = 0;
}
 
unsigned char read_byte (void) {
    unsigned char c;
    c = script [0];
    script ++;
    return c;
}
 
unsigned char read_vbyte (void) {
    unsigned char c;
    c = read_byte ();
    if (c & 128) return flags [c & 127];
    return c;
}
 
// Ejecutamos el script apuntado por *script:
void run_script (void) {
    unsigned char terminado = 0;
    unsigned char continuar = 0;
    unsigned char x, y, n, m, c;
    unsigned char *next_script;
 
    if (script == 0)
        return; 
 
    script_something_done = 0;
 
    while (1) {
        c = read_byte ();
        if (c == 0xFF) break;
        next_script = script + c;
        terminado = continuar = 0;
        while (!terminado) {
            c = read_byte ();
            switch (c) {
                case 0x10:
                    // IF FLAG x = n
                    // Opcode: 10 x n
                    x = read_vbyte ();
                    n = read_vbyte ();
                    terminado = (flags [x] != n);
                    break;
                case 0x20:
                    // IF PLAYER_TOUCHES x, y
                    // Opcode: 20 x y
                    x = read_vbyte ();
                    y = read_vbyte ();
                    terminado = (!((player.x >> 6) >= (x << 4) - 15 && (player.x >> 6) <= (x << 4) + 15 && (player.y >> 6) >= (y << 4) - 15 && (player.y >> 6) <= (y << 4) + 15));
                    break;
                case 0x60:
                     // IF JUST_PUSHED
                     // Opcode: 60
                     terminado = (!just_pushed);
                     break;
                case 0xF0:
                     // IF TRUE
                     // Opcode: F0
                     break;
                case 0xFF:
                    // THEN
                    // Opcode: FF
                    terminado = 1;
                    continuar = 1;
                    script_something_done = 1;
                    break;
            }
        }
        if (continuar) {
            terminado = 0;
            while (!terminado) {
                c = read_byte ();
                switch (c) {
                    case 0x01:
                        // SET FLAG x = n
                        // Opcode: 01 x n
                        x = read_vbyte ();
                        n = read_vbyte ();
                        flags [x] = n;
                        break;
                    case 0x10:
                        // INC FLAG x, n
                        // Opcode: 10 x n
                        x = read_vbyte ();
                        n = read_vbyte ();
                        flags [x] += n;
                        break;
                    case 0x20:
                        // SET TILE (x, y) = n
                        // Opcode: 20 x y n
                        x = read_vbyte ();
                        y = read_vbyte ();
                        n = read_vbyte ();
                        map_buff [x + (y << 4) - y] = n;
                        map_attr [x + (y << 4) - y] = comportamiento_tiles [n];
                        draw_coloured_tile (VIEWPORT_X + x + x, VIEWPORT_Y + y + y, n);
                        break;
                    case 0x31:
                        // DEC LIFE n
                        // Opcode: 31 n
                        n = read_vbyte ();
                        player.life -= n;
                        break;
                    case 0x6D:
                        // WARP_TO n
                        // Opcode: 6D n
                        n_pant = read_vbyte ();
                        player.x = read_vbyte () << 10;
                        player.y = read_vbyte () << 10;
                        script_result = 3; terminado = 1;
                        break;
                    case 0x6F:
                        // REENTER
                        // Opcode: 6F
                        script_result = 3; terminado = 1;
                        break;
                    case 0x70:
                        // SET_TIMER a, b
                        // Opcode: 0x70 a b
                        ctimer.t = read_vbyte ();
                        ctimer.frames = read_vbyte ();
                        ctimer.count = ctimer.zero = 0;
                        break;
                    case 0xE0:
                        // SOUND n
                        // Opcode: E0 n
                        n = read_vbyte ();
                        peta_el_beeper (n);
                        break;
                    case 0xE1:
                        // SHOW
                        // Opcode: E1
                        sp_UpdateNow ();
                        break;
                    case 0xE3:
                        x = 0;
                        while (1) {
                           n = read_byte ();
                           if (n == 0xEE) break;
                           sp_PrintAtInv (LINE_OF_TEXT, LINE_OF_TEXT_X + x, LINE_OF_TEXT_ATTR, n);
                           x ++;
                        }
                        break;
                    case 0xFF:
                        terminado = 1;
                        break;
                }
            }
        }
        script = next_script;
    }
    if (script_result == 3) {
        script_result = 0;
        draw_scr ();
    }
}
